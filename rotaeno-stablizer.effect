#define PI 3.14159265

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float2 offset_s;
uniform float2 aspect_s;
uniform float circle;
uniform int orient;
uniform bool debug;

sampler_state sp_linear
{
    Filter    = Linear;
    AddressU  = Border;
    AddressV  = Border;
    BorderColor = 00000000;
};

struct vertex_data
{
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

vertex_data vertex_shader_main(vertex_data v_in)
{
    vertex_data v_out;
    v_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    v_out.uv  = v_in.uv;
    return v_out;
}

float4 pixel_shader_main(vertex_data v_in) : TARGET
{
    float3 sTl = round(image.Sample(sp_linear, offset_s)).rgb;
    float3 sBr = round(image.Sample(sp_linear, float2(1,1)-offset_s)).rgb;
    float3 sTr = round(image.Sample(sp_linear, float2(1-offset_s.x,offset_s.y))).rgb;
    float3 sBl = round(image.Sample(sp_linear, float2(offset_s.x,1-offset_s.y))).rgb;
    switch(orient) {
        case -1: { float3 t = sTl; sTl = sBl; sBl = sBr; sBr = sTr; sTr = t; break; }
        case  1: { float3 t = sTl; sTl = sTr; sTr = sBr; sBr = sBl; sBl = t; break; }
        case  2: { float3 t = sTl; sTl = sBr; sBr = t; t = sTr; sTr = sBl; sBl = t; break; }
    }

    float rtNum = dot(sTl, float3(2048,1024,512)) + dot(sTr, float3(256,128,64)) + dot(sBl, float3(32,16,8)) + dot(sBr, float3(4,2,1));
    float rotation = (rtNum / 2048 + orient / 2.0) * PI;

    if (debug && v_in.uv.y < 0.015 && 0.436 < v_in.uv.x && v_in.uv.x < 0.564) {
        if (v_in.uv.y < 0.008 && v_in.uv.x < 0.56) {
            if (v_in.uv.x > 0.55) return float4(-1,0,sBr.b/5+0.8, 1) + sBr.bbbb/2;
            if (v_in.uv.x > 0.54) return float4(0,sBr.g/2+0.5,0, 1);
            if (v_in.uv.x > 0.53) return float4(sBr.r/2+0.5,-1,0, 1) + sBr.rrrr/4;
            if (v_in.uv.x > 0.52) return float4(-1,0,sBl.b/5+0.8, 1) + sBl.bbbb/2;
            if (v_in.uv.x > 0.51) return float4(0,sBl.g/2+0.5,0, 1);
            if (v_in.uv.x > 0.50) return float4(sBl.r/2+0.5,-1,0, 1) + sBr.rrrr/4;
            if (v_in.uv.x > 0.49) return float4(-1,0,sTr.b/5+0.8, 1) + sTr.bbbb/2;
            if (v_in.uv.x > 0.48) return float4(0,sTr.g/2+0.5,0, 1);
            if (v_in.uv.x > 0.47) return float4(sTr.r/2+0.5,-1,0, 1) + sTr.rrrr/4;
            if (v_in.uv.x > 0.46) return float4(-1,0,sTl.b/5+0.8, 1) + sTl.bbbb/2;
            if (v_in.uv.x > 0.45) return float4(0,sTl.g/2+0.5,0, 1);
            if (v_in.uv.x > 0.44) return float4(sTl.r/2+0.5,-1,0, 1) + sTl.rrrr/4;
        }
        if (v_in.uv.y > 0.01 && v_in.uv.x < 0.56) {
            if (v_in.uv.x > 0.53) return float4(sBr, 1);
            if (v_in.uv.x > 0.50) return float4(sBl, 1);
            if (v_in.uv.x > 0.47) return float4(sTr, 1);
            if (v_in.uv.x > 0.44) return float4(sTl, 1);
        }
        return float4(1,1,1,1);
    }

#ifdef _OPENGL
    mat2 mRotation = mat2(cos(rotation), sin(rotation), -sin(rotation), cos(rotation));
#else
    float2x2 mRotation = {cos(rotation), -sin(rotation), sin(rotation), cos(rotation)};
#endif

    float2 p_source = mul(mRotation, v_in.uv - 0.5) + 0.5;
    if (distance(p_source, float2(0.5,0.5)) > circle)
        return float4(0,0,0,0);

    p_source = p_source * aspect_s;
    p_source = p_source + (1 - aspect_s) / 2;
    float2 dist_e = min(float2(1,1)-p_source, p_source) / (debug ? 1 : 2);
    if (dist_e.x <= offset_s.x && dist_e.y <= offset_s.y)
        return float4(0,0,0,0);

    return image.Sample(sp_linear, p_source);
}

technique Draw
{
    pass
    {
        vertex_shader = vertex_shader_main(v_in);
        pixel_shader  = pixel_shader_main(v_in);
    }
}
